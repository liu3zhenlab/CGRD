#!/use/bin/perl -w
#=============================================================
# cgrd
# author: Sanzhen Liu (liu3zhen@ksu.edu)
# contributors: Guifang Lin, Patrick Schnable
# 12/29/2020
# comparative genomic depths of long reads (CGRDlong)
#=============================================================

use strict;
use warnings;
use Getopt::Long;
use File::Temp;
use FindBin;

# hard setting
my $version = "0.1";
my $klen = 31;
my $newgrouplabtext = "_TMPNEWGROUP";

# default values
my $minreadlen = 5000; # minimum sequence length
my $knum = 300; # a bin contain 300 uniquely mapped k-mers 
my $prefix = "cgrdo"; # default prefix for outputs
my $threads = 1; # number of threads used for jellyfish, bowtie, and samtools
my $groupval = "-5 -0.2 0.2 0.6"; #4 numbers for segment grouping
my $loquantile = 0.001; # bins at the range lower than this percentile are not qualified 
my $hiquantile = 0.9999; # bins at the range higher than this percentile are not qualified
my $mincountBin = 20; # minimum count of subj sample for a qualified bin
my $maxdistBins = 5000; # maximum bp distance for neighbor bins to consider as a group for segmentation 
my $chr2plot = "all"; # plot all available chr or contigs
my $readtype = "ont";

sub prompt {
	print <<EOF;
	Usage: perl cgrd [options]
	[Options]
	--ref <file>         reference genome FASTA file; required
	--subj <str>         name of subject sample; required
    --readtype <str>     read type (options: ont and pb) ($readtype)
	--minreadlen <num>       minimum sequnece bp; smaller sequences are filtered from fastq ($minreadlen)
	--sfq <file>         FASTQ file of the subject; a gzip file is accepted;
	                     required if --sbam is not provided.
	--sbam <file>        BAM alignment file; if provided, --sfq1 and --sfq2 will be ignored.
	--qry <str>          name of query sample; required
	--qfq <file>         FASTQ file of the query; a gzip file is accepted;
	                     required if qbam is not provided
	--qbam <file>        BAM alignment file; if provided, --qfq1 and --qfq2 will be ignaored.
	--binbed <file>      user specified BED file of bins for read count;
	                     if --binbed is provided, ignore --knum.
	--knum <num>         number of unique k-mers for a bin ($knum)
	--groupval <numstr>  4 numbers for segment grouping separated by space ($groupval)
	--prefix <str>       prefix for outputs ($prefix)
	--threads <num>      number of threads ($threads)
	--loquantile <float> bins with counts from "subj" at the percentile from 0-$loquantile will be excluded ($loquantile)
	--hiquantile <float> bins with counts from "subj" at the percnetile from $hiquantile-1 will be excluded ($hiquantile)
	--mincountBin <num>  bins with counts from "subj" lower than $mincountBin will be excluded ($mincountBin)
	--maxdistBins <num>  maximum bp distance between neighbor bins after exclusion of unqualified bins ($maxdistBins)
	                     if the distance is larger than $maxdistBins, two neighbor bins are separated into different groups for segmentation
	--chr2plot <str>     list of chr or contigs to be plotted, separated by space (all)
	                     e.g., "1 2 3": chromosomes 1, 2, 3 will be plotted
	--cleanup            clean up intermediate outputs if specified; off by default
	--version            version
	--help               help information
	
	o example:
	perl cgrdlong --ref <fas> --subj s1 --sfq s1.fq --qry s2 --qfq s2.fq

EOF
exit;
}

my ($ref, $subj, $sfq, $sbam);
my ($qry, $qfq, $qbam, $binbed);


#############
# parameters
############# 
my %opts = ();
&GetOptions(\%opts, "ref=s", "subj=s", "qry=s", "version=s",
                    "readtype=s", "minreadlen=i", "sfq=s", "qfq=s",
					"sbam=s", "qbam=s", "knum=i", "binbed=s",
					"loquantile=f", "hiquantile=f", "chr2plot=s",
					"mincountBin=i", "maxdistBins=i", 
					"threads=i", "prefix=s", "samfilt=s", "cleanup", "help");

if (exists $opts{version}) { 
	print "$0 $version\n";
	exit;
}

&prompt if exists $opts{help} or !%opts;
$ref = $opts{ref} if exists $opts{ref};
$subj = $opts{subj} if exists $opts{subj};
$readtype = $opts{readtype} if exists $opts{readtype};
$minreadlen = $opts{minreadlen} if exists $opts{minreadlen};
$qry = $opts{qry} if exists $opts{qry};
$sfq = $opts{sfq} if exists $opts{sfq};
$qfq = $opts{qfq} if exists $opts{qfq};
$sbam = $opts{sbam} if exists $opts{sbam};
$qbam = $opts{qbam} if exists $opts{qbam};
$binbed = $opts{binbed} if exists $opts{binbed};
$threads = $opts{threads} if exists $opts{threads};
$prefix = $opts{prefix} if (exists $opts{prefix});
$groupval = $opts{groupval} if (exists $opts{groupval});
$groupval = &spacesep($groupval);
$loquantile = $opts{loquantile} if (exists $opts{loquantile});
$hiquantile = $opts{hiquantile} if (exists $opts{hiquantile});
$mincountBin = $opts{mincountBin} if (exists $opts{mincountBin});
$maxdistBins = $opts{maxdistBins} if (exists $opts{maxdistBins});
$chr2plot = $opts{chr2plot} if (exists $opts{chr2plot});
$chr2plot = &spacesep($chr2plot);

my @groupval = split(" ", $groupval);
if ($#groupval != 3) {
	print STDERR "--groupval must have 4 numbers";
	exit;
}

if (!defined $sbam and !defined $sfq) {
	print STDERR "--sbam or --sfq is needed\n"; 
	exit;
}

if (!defined $qbam and !defined $qfq) {
	print STDERR "--qbam or --qfq is needed\n";
	exit;
}

if (!defined $ref or !defined $subj or !defined $qry) {
	print STDERR "--ref, --subj, --qry are required\n";
	exit;
}

#############
# scripts
#############
# script path:
my $scriptPath = $FindBin::Bin;
my $binPath = $scriptPath."/bin/";

#############
# output
#############
if (-d $prefix) {
	print STDERR "$prefix exists!\n";
	#exit;
} else {
	`mkdir $prefix`;
}

#log file
my $runlog = $prefix.".run.log";
open(LOG, ">$runlog") || die;

##############
# step 1. bin
##############
if (!defined $binbed) {
# fas2kmer
	&runreport("generating k-mers from reference");
	my $kfas_file=$prefix."/".$prefix."_1a_uniqkmer.fas";
	&kgen($ref, $prefix, $kfas_file, $runlog);

# kmer mapping
	&runreport("mapping k-mers to reference");
	my $kpos_file=$prefix."/".$prefix."_1b_uniqkmer.pos";
	&map2ref($kfas_file, $ref, $prefix, $kpos_file, $runlog);

# bin
	&runreport("generaring bin BED file");
	my $bin_bedfile=$prefix."/".$prefix."_1c_bin.bed";
	&pos2bin($kpos_file, $knum, $bin_bedfile);

	$binbed = $bin_bedfile; # Bin file
} else {
	print LOG "the following binBED file was provided:\n";
	print LOG "  $binbed\n";
}

######################
# step 2. reads to bam 
######################
# library size: uniquely mapped reads
my $libsizef = $prefix."/libsize.txt";
if (-f $libsizef) {
	`rm $libsizef`;
}
open(LS, ">$libsizef") || die;
print LS "sample\treads\n";

# minimap2 index
my $maptype = "map-ont";
if ($readtype eq "pb") {
	$maptype = "map-pb";
}

my $minimap_dbidx = $prefix."/minimap2";
my $refmmi=$minimap_dbidx."/ref.mmi";
if (!defined $sbam or !defined $qbam) {
	&runreport("minimap2 indexing");
	if (! -d $minimap_dbidx) {
		`mkdir $minimap_dbidx`;
	}
	# indexing
	`minimap2 -x $maptype -d $refmmi $ref`;
}

# subj minimap2 alignments:
my $subj_aln=$prefix."/".$prefix."_2c_".$subj;
my $subj_libsize;
if (!defined $sbam) {
	&runreport("subj alignment");
	
	# if input reads are gzipped:
	if ($sfq =~ /gz$/) {
		my $sfq_tmp = $prefix."/sfq.fq";
		`gunzip -c $sfq > $sfq_tmp`; # unzip
		$sfq = $sfq_tmp;
	}
	
	# length filter:
	my $subj_fq_filename = $prefix."/".$prefix."_2a_sfq.filt.fq";
	my $subj_fq_filt_summary = $prefix."/".$prefix."_2b_sfq.filt.summary";
	`perl $scriptPath/utils/fq.size.filter.pl --min $minreadlen $sfq 1>$subj_fq_filename 2>$subj_fq_filt_summary`;

	# alignment and parsing:
	`minimap2 -ax map-ont --secondary=no -t $threads $refmmi $subj_fq_filename 1>$subj_aln 2>>$runlog`;
	&sam2bam($subj_aln); # filter and convert aln to BAM
	
	# cleanup
	`rm $subj_aln`;
	`rm $subj_fq_filename`;

	$sbam = $subj_aln.".bam"; # subj BAM

	# output library size:
	$subj_libsize = `grep "valid_bps" $subj_fq_filt_summary | cut -f 2`;
} else {
	print LOG "the following subjBAM was provide:\n";
	print LOG "  $sbam\n";
	$subj_libsize=`samtools flagstat -@ $threads $sbam | grep mapped | head -n 1 | sed 's/ .*//g' 1>>$runlog 2>>$runlog`;
	#$subj_libsize= `samtools view -F4 -@ $threads -c $sbam 1>>$runlog 2>>$runlog`;
}

chomp($subj_libsize);
print LS "$subj\t$subj_libsize\n";

# qry bwa alignments:
my $qry_aln=$prefix."/".$prefix."_2d_".$qry;
my $qry_libsize;
if (!defined $qbam) {
	&runreport("query alignment");
	
	# if input reads are gzipped:
	if ($qfq =~ /gz$/) {
		my $qfq_tmp = $prefix."/qfq.fq";
		`gunzip -c $qfq > $qfq_tmp`; # unzip
		$qfq = $qfq_tmp;
	}

	# length filter:
	my $qry_fq_filename = $prefix."/".$prefix."_2e_qfq.filt.fq";
	my $qry_fq_filt_summary = $prefix."/".$prefix."_2f_qfq.filt.summary";
	`perl $scriptPath/utils/fq.size.filter.pl --min $minreadlen $qfq 1>$qry_fq_filename 2>$qry_fq_filt_summary`;

	# alignment and parsing
	`minimap2 -ax map-ont --secondary=no -t $threads $refmmi $qry_fq_filename 1>$qry_aln 2>>$runlog`;
	&sam2bam($qry_aln); # filter and convert aln to BAM	
	# cleanup
	`rm $qry_aln`;
	`rm $qry_fq_filename`;

	$qbam = $qry_aln.".bam"; # qry BAM
	
	# output library size:
	$qry_libsize = `grep "valid_bps" $qry_fq_filt_summary | cut -f 2`;
} else {
	print LOG "the following qryBAM was provide:\n";
	print LOG "  $qbam\n";
	$qry_libsize = `samtools flagstat -@ $threads $qbam | grep mapped | head -n 1 | sed 's/ .*//g' 1>>$runlog 2>>$runlog`;
}

chomp($qry_libsize);
print LS "$qry\t$qry_libsize\n";
close LS;

# remove indexed db
`rm -rf $minimap_dbidx`;

#####################
# step 3: read counts
#####################
&runreport("Bedtools counting");
my $rawbincount_file = $prefix."/".$prefix."_3a_raw.bin.counts";
my $bincount_file = $prefix."/".$prefix."_3b_bin.counts";
`bedtools multicov -bams $sbam $qbam -bed $binbed 1>$rawbincount_file 2>>$runlog`;

&runreport("Bin filtering");
`perl $scriptPath/utils/bingroup.pl --bc $rawbincount_file --loquantile $loquantile --hiquantile $hiquantile --min $mincountBin --maxdist $maxdistBins --newgrouplab $newgrouplabtext 1>$bincount_file 2>>$runlog`;

#################
# step 4: chrsize
#################
my $chrsizef = $prefix."/chrsize.txt";
`perl $scriptPath/utils/fastaSize.pl $ref 1>$chrsizef 2>>$runlog`;

#########################
# step 5: cnv and report
#########################
&runreport("Segmentation with R");
my $rmd = $scriptPath."\/utils\/cgrdlong.rdseg.Rmd";
my $htmlout = $prefix."_".$qry."_".$subj.".report.html";
my $outfile  = $prefix."_".$qry."_".$subj.".segments.txt";
my $tmpRscript = $prefix."/".$prefix."_X_Rmd.render.R";
open(TMPR, ">$tmpRscript") || die;
print TMPR "library\(rmarkdown\)\n";
print TMPR "library\(knitr\)\n";
print TMPR "\n";
print TMPR "render\(\'$rmd\',\n";
print TMPR "  params = list(\n";
print TMPR "    version=\"$version\",\n";
print TMPR "    subj=\"$subj\",\n";
print TMPR "    qry=\"$qry\",\n";
print TMPR "    bc=\"$bincount_file\",\n";
print TMPR "    libsizef=\"$libsizef\",\n";
print TMPR "    chrsizef=\"$chrsizef\",\n";
print TMPR "    outfile=\"$outfile\",\n";
print TMPR "    groupval=\"$groupval\",\n";
print TMPR "    chr2plot=\"$chr2plot\",\n";
print TMPR "    newgrouplab=\"$newgrouplabtext\"\),\n";
print TMPR "  knit_root_dir=getwd\(\),\n";
print TMPR "  output_dir=getwd\(\),\n";
print TMPR "  output_format=\"html_document\",\n";
print TMPR "  output_file=\"$htmlout\"\)\n";
close TMPR;

# render R

`Rscript $tmpRscript 1>>$runlog 2>>$runlog`;

###############################################
# cleanup if specified
###############################################
if (exists $opts{cleanup}) {
	&runreport("cleanup");
	`rm -rf $prefix`;
	my $html_dir = $prefix."_".$qry."_".$subj.".report_files";
	if (-d $html_dir) {
		`rm -rf $html_dir`;
	}
}

close LOG;

###############################################
# module 0: report running result
################################################
# funtion to report running return
sub runreport {
	my $injob = shift;
	my $dateinfo = `date +'o %Y-%m-%d %H:%M:%S'`;
	print STDERR "$dateinfo";
	print STDERR "  $injob.\n";
	print LOG "$dateinfo  ";	
	print LOG "  $injob.\n";
}


###############################################
# module 1: kgen
###############################################
sub kgen {
	# fasta/q to kmer table
	my ($infile, $inprefix, $fas_out, $inlog) = @_;
	my $infile_to_feed = $infile;
	
	# try to recognize gz files, unzip them and read
	if ($infile =~ /gz$/) {
		#### suffix
		my $ori_suffix = $infile;
		$ori_suffix =~ s/.gz$//g;
		$ori_suffix =~ s/.*\.//g;
		#### unzip to a new temp file
		my $infile_tmp = $inprefix."/".${inprefix}."_1_".${ori_suffix}.".tmp";
		`gunzip -c $infile > $infile_tmp 2>>$inlog`; # unzip
		$infile_to_feed = $infile_tmp;
	}
	
	# generate fasta file
	print STDERR "    $infile_to_feed\n";
	#print LOG "input reference file is:\n";
	print LOG "    $infile_to_feed\n";

	`jellyfish count -C -s 1000M -m $klen -t $threads -o $fas_out.jf $infile_to_feed 1>>$inlog 2>>$runlog`;

	`jellyfish dump -t -c -L 1 -U 1 -o $fas_out.txt $fas_out.jf 1>>$inlog 2>>$runlog`;
	
	my $txt2fas_para = "\"\>c\"NR\"\\n\"\$1";
	`awk '{ print $txt2fas_para }' $fas_out.txt 1>$fas_out 2>>$inlog`;
		
	# cleanup
	`rm $fas_out.jf`;
	`rm $fas_out.txt`;
	if ($infile_to_feed ne $infile) {
		`rm $infile_to_feed`;
	}
}

###############################################
# module 2: map2ref
###############################################
sub map2ref {
# map kmer fas to ref
# output mapping positions of kmers
	my ($infas, $inref, $inprefix, $outkpos, $inlog) = @_;
	# index directory:
	my $bowtie_dbidx = $prefix."/bowtie";
	if (! -d $bowtie_dbidx) {
		`mkdir $bowtie_dbidx`;
	}
	`bowtie-build $inref $bowtie_dbidx/ref`; # index
	# alignment:
	`bowtie -f -n 0 -v 0 -p $threads --quiet --no-unal -B 1 --sam --sam-nohead -f $bowtie_dbidx/ref $infas | cut -f 3,4 | sort -k1,1 -k2n,2 1>$outkpos 2>>$inlog`;
	`rm -r $bowtie_dbidx`; # cleanup
}


###############################################
# module 3: pos2bin
###############################################
sub pos2bin {
	my ($inkpos, $inknum, $outbinbed) = @_;
	
	my $binnum = 0;
	open(MODOUT, ">$outbinbed") || die;
	
	my $incount = 0;
	my $prechr = "";
	my ($start, $end);
	open(MODIN, $inkpos) || die;
	while (<MODIN>) {
		my ($inchr, $pos) = split;
		if ($inchr eq $prechr) {
			$incount++;
			if ($incount == $inknum) {
				$binnum++;
				my $ad_start = $start - 1; # adjust 1 for BED output
				print MODOUT "$inchr\t$ad_start\t$pos\t$binnum\n"; # BED format
				$incount = 0;
			} elsif ($incount == 1) {
				$start = $pos;
			}
		} else { # new chr or 1st chr
			if ($incount >= $inknum * 0.6) { # last bin of teh previous chr
				$binnum++;
				my $ad_start = $start - 1; # adjust 1 for BED output
				print MODOUT "$prechr\t$ad_start\t$end\t$binnum\n"; # BED format
			}
			$incount = 0;
			$start = $pos;
		}
		
		$prechr = $inchr;
		$end = $pos;
	}

	close MODIN;
	close MODOUT;
}

###############################################
# module 4: SAM2BAM
###############################################
sub sam2bam {
	my $insam = shift;
	`samtools view -b -h -@ $threads $insam | samtools sort -o $insam.bam -@ $threads`;
	`samtools index $insam.bam`;
}

###############################################
# module 5: format input
###############################################
sub spacesep {
	my $inval = shift;
	$inval =~ s/^ +//g; # remove space at the beginning
	$inval =~ s/ +$//g; # remove space at the end
	$inval =~ s/,/ /g; # replace , with a space
	$inval =~ s/ +/ /g; # replace multiple spaces into one
	return($inval);
}

